[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Fundamentals of Machine Learning",
    "section": "",
    "text": "1 Preparations\nInsert libraries.\n# 01 Libraries\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\nlibrary(plotly)\nlibrary(ggrepel)\nLoad data.\n# 02 Load DATA\nsp_500_prices_tbl &lt;- read_rds(\"Fundamentals of Machine Learning/Business Decisions with Machine Learning/sp_500_prices_tbl.rds\")\nsp_500_index_tbl &lt;- read_rds(\"Fundamentals of Machine Learning/Business Decisions with Machine Learning/sp_500_index_tbl.rds\")                         \n\n\n\n2 Question 1: Which stock prices behave similarly?\nStep 1: Convert stock prices to a standardized format\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;%\n  select(symbol,date,adjusted) %&gt;%\n  filter(date &gt; '2018-01-01') %&gt;%\n  group_by(symbol) %&gt;%\n  mutate(price_lagged = lag(adjusted, n=1)) %&gt;%\n  ungroup() %&gt;%\n  na.omit() %&gt;%\n  mutate(pct_return = (adjusted-price_lagged)/price_lagged) %&gt;%\n  select(symbol,date,pct_return)\nStep 2: Convert to User-Item Format.\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0)\nStep 3: Perform K-Means Clustering.\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  kmeans(centers = 4, nstart = 20)\nStep 4: Find the optimal value of k\nkmeans_mapper &lt;- function(center = 3) {\n  stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = center, nstart = 20)\n}\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;%\n  mutate(k_means = centers %&gt;% map(kmeans_mapper)) %&gt;%\n  mutate(glance  = k_means %&gt;% map(glance))\nStep 5: The final data can be used and piped into a scree plot.\nk_means_mapped_tbl %&gt;%\n  unnest(glance) %&gt;%\n  select(centers, tot.withinss) %&gt;%\n\n#Visualization of Scree Plot\nggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#2DC6D6\", size = 4) +\n  geom_line(color = \"#2DC6D6\", size = 1) +\n  # Add labels (which are repelled a little)\n  ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n  \n  # Formatting\n  labs(title = \"Skree Plot\",\n       subtitle = \"Measures the distance each of the stocks are from the closes K-Means center\",\n       caption = \"Conclusion: Based on the Scree Plot, we select 5 clusters to segment the stocks.\")\nDepicted below is the according plot.  Based on the Scree Plot, we select 10 cluster to segment the stocks.\nStep 6: Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\nConvert UMAP results to tibble with symbols.\numap_results_tbl &lt;- umap_results$layout %&gt;%\n  as_tibble() %&gt;%\n  bind_cols(stock_date_matrix_tbl %&gt;% select(symbol))\n\nVisualize UMAP results.\numap_results_tbl %&gt;%\nggplot(aes(V1,V2)) +\n  geom_point(color = \"#2DC6D6\", size = 2, alpha = 0.5) + \n  \n  # Formatting\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\nThe according plot can be seen below.  Step 7: Combine K-Means and UMAP. Get the k_means_obj from the 10th center.Store as k_means_obj.\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n  pull(k_means) %&gt;%\n  pluck(10)\nCombine k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;%\n  augment(stock_date_matrix_tbl) %&gt;%\n  # Select the data we need\n  select(symbol, .cluster) %&gt;%\n  left_join(umap_results_tbl, by = \"symbol\") %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\") %&gt;%\n  mutate(label_text = str_glue(\"Ticker: {symbol}\"))\nStep 8: Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;%\n  #Visualize the K-Means and UMAp results\n  ggplot(aes(V1,V2,color = .cluster))+\n  geom_point(alpha = 0.5)+\n  geom_label_repel(aes(label = label_text), size = 2, fill = \"#282A36\") +\n  scale_color_manual(values=c(\"black\", \"violet\", \"green\",\"red\",\"orange\",\"purple\",\"pink\",\"blue\",\"brown\",\"yellow\"))\n\nThe resulting plot is depicted below."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Supervise ML - Regression 2",
    "section": "",
    "text": "Challenge: Our goal is to figure out what gaps exist in the products and come up with a pricing algorithm that will help us to determine a price, if we were to come up with products in that product category.\n\n1 Preparations\nlibrary(tidyverse)\nlibrary(parsnip)\nlibrary(tidymodels)\nlibrary(rstanarm)\nlibrary(broom.mixed)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(rpart.plot)\nBuilding the model first.\nbike_orderlines_tbl &lt;- readRDS(\"bike_orderlines.rds\")\nmodel_sales_tbl &lt;- bike_orderlines_tbl %&gt;%\n  select(total_price, model, category_2, frame_material) %&gt;%\n  group_by(model, category_2, frame_material) %&gt;%\n  summarise(total_sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;% arrange(desc(total_sales))\nmodel_sales_tbl %&gt;% mutate(category_2 = as_factor(category_2) %&gt;% \n                             fct_reorder(total_sales, .fun = max) %&gt;% \n                             fct_rev()) %&gt;%\n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(title = \"Total Sales for Each Model\",x = \"Frame Material\", y = \"Revenue\")\nThe resulting plot is depicted below. \nbike_features_tbl &lt;- readRDS(\"bike_features_tbl.rds\")\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %&gt;% \n  mutate(`shimano dura-ace`        = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano dura-ace \") %&gt;% as.numeric(),\n         `shimano ultegra`         = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano ultegra \") %&gt;% as.numeric(),\n         `shimano 105`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano 105 \") %&gt;% as.numeric(),\n         `shimano tiagra`          = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano tiagra \") %&gt;% as.numeric(),\n         `Shimano sora`            = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano sora\") %&gt;% as.numeric(),\n         `shimano deore`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore(?! xt)\") %&gt;% as.numeric(),\n         `shimano slx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano slx\") %&gt;% as.numeric(),\n         `shimano grx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano grx\") %&gt;% as.numeric(),\n         `Shimano xt`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore xt |shimano xt \") %&gt;% as.numeric(),\n         `Shimano xtr`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano xtr\") %&gt;% as.numeric(),\n         `Shimano saint`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano saint\") %&gt;% as.numeric(),\n         `SRAM red`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram red\") %&gt;% as.numeric(),\n         `SRAM force`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram force\") %&gt;% as.numeric(),\n         `SRAM rival`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram rival\") %&gt;% as.numeric(),\n         `SRAM apex`               = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram apex\") %&gt;% as.numeric(),\n         `SRAM xx1`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram xx1\") %&gt;% as.numeric(),\n         `SRAM x01`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram x01|sram xo1\") %&gt;% as.numeric(),\n         `SRAM gx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram gx\") %&gt;% as.numeric(),\n         `SRAM nx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram nx\") %&gt;% as.numeric(),\n         `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n         `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n         `Campagnolo potenza`      = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo potenza\") %&gt;% as.numeric(),\n         `Campagnolo super record` = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo super record\") %&gt;% as.numeric(),\n         `shimano nexus`           = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano nexus\") %&gt;% as.numeric(),\n         `shimano alfine`          = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano alfine\") %&gt;% as.numeric()) %&gt;%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %&gt;% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \n\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  mutate(id = row_number()) %&gt;% \n  mutate(frame_material = factor(frame_material)) %&gt;%\n  select(id, everything()) \n\nbike_features_tbl %&gt;% distinct(category_2)\nSplit the objects with the according distinction in order to enable proper training.\nsplit_obj &lt;- initial_split(bike_features_tbl, prop   = 0.80, strata = \"category_2\")\nsplit_obj %&gt;% training() %&gt;% distinct(category_2)\nSplit into training and testing/validation tibble.\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj)\ntrain_tbl &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl), \" |-\", \"_\"))\nCreate features with the recipe package. Target value is frame material in this case. Also initiate dummys.\nbike_rec &lt;- recipe(frame_material ~ ., data = train_tbl) %&gt;% \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) \nBundle the model and recupe with the workflow package.\nlr_mod &lt;- logistic_reg() %&gt;% set_engine(\"glm\")\nbike_wflow &lt;- workflow() %&gt;%add_model(lr_mod) %&gt;% add_recipe(bike_rec)\nbike_fit &lt;- bike_wflow %&gt;% fit(data = train_tbl)\nbike_fit %&gt;% pull_workflow_fit() %&gt;% tidy()\nUse the prediction function in order to run the trained model.\nbike_predict &lt;- predict(bike_fit, test_tbl, type=\"prob\") %&gt;% \n  bind_cols(test_tbl %&gt;% select(frame_material, category_2)) \nbike_predict %&gt;% roc_curve(truth = frame_material, .pred_aluminium) %&gt;% \n  autoplot()\nThe resulting plot is shown below. \nbike_predict %&gt;% \n  roc_curve(truth = frame_material, .pred_carbon) %&gt;% \n  autoplot()\n\n\n\nBike Overview\n\n\nbike_predict %&gt;% roc_auc(truth = frame_material, .pred_aluminium)\nroc_car &lt;- bike_predict %&gt;% roc_auc(truth = frame_material, .pred_carbon)\nEvaluate the model with the yardstick package\nmodel_01_linear_lm_simple &lt;- linear_reg(mode = \"regression\") %&gt;%\n  set_engine(\"lm\") %&gt;%\n  fit(price ~ category_2 + frame_material, data = train_tbl)\n\nmodel_01_linear_lm_simple %&gt;%\n  predict(new_data = test_tbl) %&gt;%\n  bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n  metrics(truth = price, estimate = .pred)\nPlot the results, facet-wrapping using the frame_material as an argument. \nnew_trail &lt;- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Trail\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0)\nnew_trail\nPredict using the new_trail data.\npredict(model_01_linear_lm_simple, new_data = new_trail)\npredictions_new_trail_tbl &lt;- models_tbl %&gt;%\n  mutate(predictions = map(model, predict, new_data = new_trail)) %&gt;%\n  unnest(predictions) %&gt;%\n  mutate(category_2 = \"Trail\") %&gt;%\n  left_join(new_trail, by = \"category_2\")\npredictions_new_trail_tbl\nPlot the results\ng2 &lt;- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_trail_tbl) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 5,\n                           data = predictions_new_trail_tbl)\ng2\n\n\n\nBike Overview"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Automated Machine Learning with H20 (I)",
    "section": "",
    "text": "Insert libraries.\n# 01 Libraries\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\nLoad data and defintions\npath_data_definitions &lt;- \"Fundamentals of Machine Learning/Business Decisions with Machine Learning/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\nemployee_attrition_tbl &lt;- read_csv(\"AutoML 1/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\nDescriptive Features\nemployee_attrition_tbl %&gt;% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\nEmployment Features\nemployee_attrition_tbl %&gt;% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\nCompensation Features\nemployee_attrition_tbl %&gt;% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\nSurvey Results\nemployee_attrition_tbl %&gt;% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\nPerformance Data\nemployee_attrition_tbl %&gt;% select(JobInvolvement, PerformanceRating)\nWork-Life-Features\nemployee_attrition_tbl %&gt;% select(BusinessTravel, OverTime)\nTraining & Education\nemployee_attrition_tbl %&gt;% select(Education, EducationField, TrainingTimesLastYear)\nTime-based Features\nemployee_attrition_tbl %&gt;% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#compensation-features",
    "href": "content/01_journal/03_data_wrangling.html#compensation-features",
    "title": "Automated Machine Learning with H20 (I)",
    "section": "4.1 Compensation Features",
    "text": "4.1 Compensation Features\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\nCompensation features\n\n\n\nQuestion 1: What can you deduce about the interaction between Monthly Income and Attrition?\nAnswer: Those that are leaving have a lower Monthly Income.\n\n\nQuestion 2: What can you deduce about the interaction between Percent Salary Hike and Attrition?\nAnswer: Those that are leaving have lower Percent Salary Hike.\n\n\nQuestion 3: What can you deduce about the interaction between Stock Option Level and Attrition?\nAnswer: Those that are staying have a higher stock option level."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#survey-results",
    "href": "content/01_journal/03_data_wrangling.html#survey-results",
    "title": "Automated Machine Learning with H20 (I)",
    "section": "4.2 Survey Results",
    "text": "4.2 Survey Results\n#   4. Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\nSurvey results\n\n\n\nQuestion 4: What can you deduce about the interaction between Environment Satisfaction and Attrition?\nAnswer: A higher proportion of those leaving have a low environment satisfaction level.\n\n\nQuestion 5: What can you deduce about the interaction between Work Life Balance and Attrition?\nAnswer: Those that are staying have a higher density of 2’s and 3’s."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#performance-data",
    "href": "content/01_journal/03_data_wrangling.html#performance-data",
    "title": "Automated Machine Learning with H20 (I)",
    "section": "4.3 Performance Data",
    "text": "4.3 Performance Data\n#   5. Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\nPerformance Data\n\n\n\nQuestion 6: What Can you deduce about the interaction between Job Involvement and Attrition?\nAnswer: Those that are leaving have a lower density of 3’s and 4’s"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#work-life-features",
    "href": "content/01_journal/03_data_wrangling.html#work-life-features",
    "title": "Automated Machine Learning with H20 (I)",
    "section": "4.4 Work-Life Features",
    "text": "4.4 Work-Life Features\n#   6. Work-Life Features \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\nWork-Life Features\n\n\n\nQuestion 7: What can you deduce about the interaction between Over Time and Attrition?\nAnswer: The proportion of those staying that are working Over Time are high compared to those that are not staying."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#training-and-education",
    "href": "content/01_journal/03_data_wrangling.html#training-and-education",
    "title": "Automated Machine Learning with H20 (I)",
    "section": "4.5 Training and Education",
    "text": "4.5 Training and Education\n#   7. Training and Education \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\nTraining and Education\n\n\n\nQuestion 8: What can you deduce about the interaction between Training Times Last Year and Attrition?\nAnswer: People that leave tend to have less annual training."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#time-based-features",
    "href": "content/01_journal/03_data_wrangling.html#time-based-features",
    "title": "Automated Machine Learning with H20 (I)",
    "section": "4.6 Time Based Features",
    "text": "4.6 Time Based Features\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"years\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\nTime based features\n\n\n\nQuestion 9: What can you deduce about the interaction between Years At Company and Attrition?\nAnswer: People that leave tend to have less working years at the company."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#question-10-what-can-you-deduce-about-the-interaction-between-years-since-last-promotion-and-attrition",
    "href": "content/01_journal/03_data_wrangling.html#question-10-what-can-you-deduce-about-the-interaction-between-years-since-last-promotion-and-attrition",
    "title": "Automated Machine Learning with H20 (I)",
    "section": "4.7 #Question 10: What can you deduce about the interaction between Years Since Last Promotion and Attrition?",
    "text": "4.7 #Question 10: What can you deduce about the interaction between Years Since Last Promotion and Attrition?\nAnswer: Those that are leaving have fewer years since last promotion than those that are staying."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Automated Machine Learning with H20 (II)",
    "section": "",
    "text": "Challenge description: Goal is to predict whether or not a product will be put on backorder status.Given a number of product metrics such as: current inventory, transit time, demand forecasts and prior sales. It’s a classic Binary Classification problem.\n\n1 -01 Libraries-\nlibrary(h2o)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(tidymodels)\n\n\n2 -02 Load the training & test dataset-\n#Import and clean Data\nproduct_backorders_tbl_raw &lt;- read_csv(\"AutoML 2/product_backorders.csv\")\nproduct_backorders_tbl %&gt;% glimpse\nproduct_backorders_tbl %&gt;% class\nproduct_backorders_tbl &lt;- product_backorders_tbl_raw %&gt;%\n  replace(is.na(.), 0) %&gt;%\n  select(national_inv,forecast_3_month,forecast_6_month,forecast_9_month,sales_1_month,sales_3_month,sales_9_month,went_on_backorder,lead_time)\n\n#Split the Dataset---\nset.seed(seed = 1113)\nsplit_obj                       &lt;- rsample::initial_split(product_backorders_tbl, prop = 0.85)\ntrain_readable_tbl              &lt;- training(split_obj)\ntest_readable_tbl               &lt;- testing(split_obj)\n\ntrain_readable_tbl %&gt;% glimpse\n\n#Add recipe\nrecipe_obj &lt;- recipe(went_on_backorder ~., data = train_readable_tbl) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  step_dummy(all_nominal()) %&gt;% \n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\ntrain_tbl %&gt;% glimpse\n\n\n3 -03 Specify the response and predictor variables-\n#Modeling\nh2o.init()\n\n#Split data into a training and a validation data frame\n#Setting the seed is just for reproducability\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n#Set the target and predictors\ny &lt;- \"went_on_backorder_Yes\"\nx &lt;- setdiff(names(train_h2o), y)\nConsole output:\nH2O is not running yet, starting it now...\n\nNote:  In case of errors look at the following log files:\n    C:\\Users\\morit\\AppData\\Local\\Temp\\RtmpkldTbq\\file365684f973e98/h2o_morit_started_from_r.out\n    C:\\Users\\morit\\AppData\\Local\\Temp\\RtmpkldTbq\\file3656852a87f69/h2o_morit_started_from_r.err\n\njava version \"1.8.0_371\"\nJava(TM) SE Runtime Environment (build 1.8.0_371-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.371-b11, mixed mode)\n\nStarting H2O JVM and connecting:  Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         2 seconds 203 milliseconds \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.40.0.4 \n    H2O cluster version age:    1 month and 28 days \n    H2O cluster name:           H2O_started_from_R_morit_yyy113 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   3.52 GB \n    H2O cluster total cores:    8 \n    H2O cluster allowed cores:  8 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.3.0 (2023-04-21 ucrt) \n\n\n4 -04 Run AutoML specifying the stopping criterion-\n#Computation\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n\n5 -05 View the leaderboard-\ntypeof(automl_models_h2o)\n\nslotNames(automl_models_h2o)\n\nautoml_models_h2o@leaderboard\n\nautoml_models_h2o@leader\nConsole output:\n&gt; typeof(automl_models_h2o)\n[1] \"S4\"\n&gt; slotNames(automl_models_h2o)\n[1] \"project_name\"   \"leader\"        \n[3] \"leaderboard\"    \"event_log\"     \n[5] \"modeling_steps\" \"training_info\"\n&gt; automl_models_h2o@leaderboard\n                                                 model_id\n1    StackedEnsemble_AllModels_1_AutoML_1_20230625_134859\n2 StackedEnsemble_BestOfFamily_2_AutoML_1_20230625_134859\n3    StackedEnsemble_AllModels_3_AutoML_1_20230625_134859\n4    StackedEnsemble_AllModels_2_AutoML_1_20230625_134859\n5 StackedEnsemble_BestOfFamily_3_AutoML_1_20230625_134859\n6                          GBM_3_AutoML_1_20230625_134859\n       rmse        mse       mae     rmsle\n1 0.2374131 0.05636497 0.1185295 0.1667977\n2 0.2375384 0.05642451 0.1191784 0.1669414\n3 0.2377237 0.05651256 0.1194605 0.1669419\n4 0.2377319 0.05651644 0.1195676 0.1670420\n5 0.2379560 0.05662306 0.1202086 0.1671611\n6 0.2398715 0.05753832 0.1189256 0.1674136\n  mean_residual_deviance\n1             0.05636497\n2             0.05642451\n3             0.05651256\n4             0.05651644\n5             0.05662306\n6             0.05753832\n\n[22 rows x 6 columns] \n\n&gt; automl_models_h2o@leader\nModel Details:\n==============\n\nH2ORegressionModel: stackedensemble\nModel ID:  StackedEnsemble_AllModels_1_AutoML_1_20230625_134859 \nModel Summary for Stacked Ensemble: \n                                    key\n1                     Stacking strategy\n2  Number of base models (used / total)\n3      # GBM base models (used / total)\n4      # DRF base models (used / total)\n5      # GLM base models (used / total)\n6                 Metalearner algorithm\n7    Metalearner fold assignment scheme\n8                    Metalearner nfolds\n9               Metalearner fold_column\n10   Custom metalearner hyperparameters\n              value\n1  cross_validation\n2               4/6\n3               3/4\n4               1/1\n5               0/1\n6               GLM\n7            Random\n8                 5\n9                NA\n10             None\n\n\nH2ORegressionMetrics: stackedensemble\n** Reported on training data. **\n\nMSE:  0.03395538\nRMSE:  0.1842698\nMAE:  0.09065456\nRMSLE:  0.1300627\nMean Residual Deviance :  0.03395538\n\n\nH2ORegressionMetrics: stackedensemble\n** Reported on validation data. **\n\nMSE:  0.05205382\nRMSE:  0.2281531\nMAE:  0.1140043\nRMSLE:  0.1596159\nMean Residual Deviance :  0.05205382\n\n\nH2ORegressionMetrics: stackedensemble\n** Reported on cross-validation data. **\n** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n\nMSE:  0.05568107\nRMSE:  0.2359684\nMAE:  0.1197783\nRMSLE:  0.1659957\nMean Residual Deviance :  0.05568107\n\n\nCross-Validation Metrics Summary: \n                             mean        sd\nmae                      0.119585  0.004007\nmean_residual_deviance   0.055614  0.002676\nmse                      0.055614  0.002676\nnull_deviance          288.787400 16.519962\nr2                       0.467606  0.015342\nresidual_deviance      153.644550  9.274528\nrmse                     0.235770  0.005697\nrmsle                    0.165776  0.004137\n                       cv_1_valid cv_2_valid\nmae                      0.120877   0.116474\nmean_residual_deviance   0.057802   0.053377\nmse                      0.057802   0.053377\nnull_deviance          289.558400 277.867070\nr2                       0.441448   0.476448\nresidual_deviance      161.728620 145.452180\nrmse                     0.240419   0.231035\nrmsle                    0.169369   0.162210\n                       cv_3_valid cv_4_valid\nmae                      0.122926   0.114320\nmean_residual_deviance   0.056638   0.052183\nmse                      0.056638   0.052183\nnull_deviance          303.084560 267.235630\nr2                       0.480238   0.467884\nresidual_deviance      157.454960 142.040850\nrmse                     0.237988   0.228435\nrmsle                    0.167905   0.160456\n                       cv_5_valid\nmae                      0.123328\nmean_residual_deviance   0.058068\nmse                      0.058068\nnull_deviance          306.191440\nr2                       0.472014\nresidual_deviance      161.546140\nrmse                     0.240974\nrmsle                    0.168938\n\n\n\n6 -06 Predicting using Leader Model-\nstacked_ensemble_h2o &lt;- h2o.loadModel(\"AutoML 2/Models/StackedEnsemble_AllModels_1_AutoML_2_20230621_163345\")\nstacked_ensemble_h2o &lt;- h2o.loadModel(\"AutoML 2/Models/StackedEnsemble_AllModels_1_AutoML_2_20230621_163345\")\n\n\n#Make predictions\npredictions &lt;- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\ntypeof(predictions)\npredictions_tbl &lt;- predictions %&gt;% as_tibble()\nConsole output:\n&gt; typeof(predictions)\n[1] \"environment\"\n\n\n7 -07 Save the leader model-\nh2o.getModel(\"StackedEnsemble_AllModels_1_AutoML_2_20230621_163345\") %&gt;% \n  h2o.saveModel(path = \"AutoML 2/Models/\")"
  },
  {
    "objectID": "content/01_journal/05_test.html",
    "href": "content/01_journal/05_test.html",
    "title": "Performance Measures",
    "section": "",
    "text": "Challenge description: Go through steps"
  },
  {
    "objectID": "content/01_journal/05_test.html#leaderbord-visualization-",
    "href": "content/01_journal/05_test.html#leaderbord-visualization-",
    "title": "Performance Measures",
    "section": "7.1 -Leaderbord visualization-",
    "text": "7.1 -Leaderbord visualization-\nTask: Visualize the H2O leaderboard to help with model selection.\ndata_transformed_tbl &lt;- automl_models_h2o@leaderboard %&gt;%\n  as_tibble() %&gt;%\n  select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n  mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n  slice(1:15) %&gt;% \n  rownames_to_column(var = \"rowname\") %&gt;%\n  # Visually this step will not change anything\n  # It reorders the factors under the hood\n  mutate(\n    model_id   = as_factor(model_id) %&gt;% reorder(auc),\n    model_type = as.factor(model_type)\n  ) %&gt;% \n  pivot_longer(cols = -c(model_id, model_type, rowname), \n               names_to = \"key\", \n               values_to = \"value\", \n               names_transform = list(key = forcats::fct_inorder)\n  ) %&gt;% \n  mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as_factor() %&gt;% fct_rev())\n\n#Plot the data\ndata_transformed_tbl %&gt;%\n  ggplot(aes(value, model_id, color = model_type)) +\n  geom_point(size = 3) +\n  geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n  \n  # Facet to break out logloss and auc\n  facet_wrap(~ key, scales = \"free_x\") +\n  labs(title = \"Leaderboard Metrics\",\n       subtitle = paste0(\"Ordered by: \", \"auc\"),\n       y = \"Model Postion, Model ID\", x = \"\") + \n  theme(legend.position = \"bottom\")\n\n#Put everything into a function\nplot_h2o_leaderboard &lt;- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n  \n  # Setup inputs\n  # adjust input so that all formats are working\n  order_by &lt;- tolower(order_by[[1]])\n  \n  leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n    as.tibble() %&gt;%\n    select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n    mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n    rownames_to_column(var = \"rowname\") %&gt;%\n    mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as.factor())\n  \n  # Transformation\n  if (order_by == \"auc\") {\n    \n    data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n      slice(1:n_max) %&gt;%\n      mutate(\n        model_id   = as_factor(model_id) %&gt;% reorder(auc),\n        model_type = as.factor(model_type)\n      ) %&gt;%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else if (order_by == \"logloss\") {\n    \n    data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n      slice(1:n_max) %&gt;%\n      mutate(\n        model_id   = as_factor(model_id) %&gt;% reorder(logloss) %&gt;% fct_rev(),\n        model_type = as.factor(model_type)\n      ) %&gt;%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else {\n    # If nothing is supplied\n    stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n  }\n  \n  # Visualization\n  g &lt;- data_transformed_tbl %&gt;%\n    ggplot(aes(value, model_id, color = model_type)) +\n    geom_point(size = size) +\n    facet_wrap(~ key, scales = \"free_x\") +\n    labs(title = \"Leaderboard Metrics\",\n         subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n         y = \"Model Postion, Model ID\", x = \"\")\n  \n  if (include_lbl) g &lt;- g + geom_label(aes(label = round(value, 2), \n                                           hjust = \"inward\"))\n  \n  return(g)\n  \n}\nThe according leaderboard is depicted below."
  },
  {
    "objectID": "content/01_journal/05_test.html#tune-a-model-with-grid-search-",
    "href": "content/01_journal/05_test.html#tune-a-model-with-grid-search-",
    "title": "Performance Measures",
    "section": "7.2 -Tune a model with grid search-",
    "text": "7.2 -Tune a model with grid search-\nh2o.init()\ndeeplearning_grid_01 &lt;- h2o.grid(\n  \n  # See help page for available algos\n  algorithm = \"deeplearning\",\n  \n  # I just use the same as the object\n  grid_id = \"deeplearning_grid_01\",\n  \n  # The following is for ?h2o.deeplearning()\n  # predictor and response variables\n  x = x,\n  y = y,\n  \n  # training and validation frame and crossfold validation\n  training_frame   = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  \n  # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n  hyper_params = list(\n    # Use some combinations (the first one was the original)\n    hidden = list(c(10, 10, 10), c(20, 20, 20), c(30, 30, 30)),\n    epochs = c(10, 50, 100)\n  )\n)\ndeeplearning_grid_01\n#Sort by a different metric\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n#Pull best perfomring model\ndeeplearning_grid_01_model_1 &lt;- h2o.getModel(\"deeplearning_grid_01_model_6\")\ndeeplearning_grid_01_model_1 %&gt;% h2o.auc(train = T, valid = T, xval = T)\n#Run on the test data\ndeeplearning_grid_01_model_1 %&gt;%\n  h2o.performance(newdata = as.h2o(test_tbl))\n# -&gt; Error is ~11%\n#Save model\nh2o.getModel(\"deeplearning_grid_01_model_6\") %&gt;% \n  h2o.saveModel(path = \"AutoML 2/Models/\")\nThe resulting grid search is depicted below."
  },
  {
    "objectID": "content/01_journal/05_test.html#visualize-the-trade-between-the-precision-and-the-recall-and-the-optimal-threshold-",
    "href": "content/01_journal/05_test.html#visualize-the-trade-between-the-precision-and-the-recall-and-the-optimal-threshold-",
    "title": "Performance Measures",
    "section": "7.3 -Visualize the trade between the precision and the recall and the optimal threshold-",
    "text": "7.3 -Visualize the trade between the precision and the recall and the optimal threshold-\ndeeplearning_h2o &lt;- h2o.loadModel(\"AutoML 2/Models/deeplearning_grid_01_model_6\")\nstacked_ensemble_h2o &lt;- h2o.loadModel(\"AutoML 2/Models/StackedEnsemble_AllModels_3_AutoML_2_20230623_160327\")\ndeeplearning_h2o\nstacked_ensemble_h2o\n#Create a performance object\nperformance_h2o &lt;- h2o.performance(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\ntypeof(performance_h2o)\nperformance_h2o %&gt;% slotNames()\nperformance_h2o@metrics\n\n#Confusion Matrix\nh2o.confusionMatrix(stacked_ensemble_h2o)\nh2o.confusionMatrix(deeplearning_h2o)\n\n#-&gt; Precision vs Recall Plot\n# This is on the test set\nperformance_tbl &lt;- performance_h2o %&gt;%\n  h2o.metric() %&gt;%\n  as.tibble() \nperformance_tbl %&gt;% glimpse()\n\n# New theme\ntheme_new &lt;- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n) \n#Plot\nperformance_tbl %&gt;%\n  filter(f1 == max(f1))\n\nperformance_tbl %&gt;%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  \n  # Insert line where precision and recall are harmonically optimized\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\") +\n  theme_new\nDepicted below is the Precision vs. Recall plot.  Additionally, also the confusion matrix. Console output:\n&gt; h2o.confusionMatrix(stacked_ensemble_h2o)\nConfusion Matrix (vertical: actual; across: predicted)  for max f1 @ threshold = 0.414959133255622:\n         No  Yes    Error        Rate\nNo     8697  177 0.019946   =177/8874\nYes     163  997 0.140517   =163/1160\nTotals 8860 1174 0.033885  =340/10034"
  },
  {
    "objectID": "content/01_journal/05_test.html#roc-plot-",
    "href": "content/01_journal/05_test.html#roc-plot-",
    "title": "Performance Measures",
    "section": "7.4 -ROC Plot-",
    "text": "7.4 -ROC Plot-\n# ROC Plot\n\npath &lt;- \"AutoML 2/Models/StackedEnsemble_AllModels_3_AutoML_2_20230623_160327\"\n\n  model_h2o &lt;- h2o.loadModel(path)\n  perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n  \n\nmodel_metrics_tbl &lt;- perf_h2o %&gt;%\n  h2o.metric() %&gt;%\n  as_tibble() %&gt;%\n  mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n  select(tpr, fpr, auc)\n\nmodel_metrics_tbl %&gt;%\n  mutate(\n    # Extract the model names\n    path = str_split(path, pattern = \"/\", simplify = T)[,3] %&gt;% as_factor(),\n    auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n  ) %&gt;%\n  ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n  geom_line(size = 1) +\n  \n  # just for demonstration purposes\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  \n  theme_new +\n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"Performance of Top Performing Model\"\n  )\nThe resulting plot is depicted below."
  },
  {
    "objectID": "content/01_journal/05_test.html#precision-vs-recall-plot-",
    "href": "content/01_journal/05_test.html#precision-vs-recall-plot-",
    "title": "Performance Measures",
    "section": "7.5 -Precision vs Recall Plot-",
    "text": "7.5 -Precision vs Recall Plot-\nmodel_metrics_tbl_2 &lt;- perf_h2o %&gt;%\n  h2o.metric() %&gt;%\n  as_tibble() %&gt;%\n  mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n  select(tpr, fpr, auc, precision, recall)\n\n\nmodel_metrics_tbl_2 %&gt;%\n  mutate(\n    path = str_split(path, pattern = \"/\", simplify = T)[,3] %&gt;% as_factor(),\n    auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n  ) %&gt;%\n  ggplot(aes(recall, precision, color = path, linetype = auc)) +\n  geom_line(size = 1) +\n  theme_new + \n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"Performance of Top Performing Model\"\n  )\nThe resulting plot is depicted below."
  },
  {
    "objectID": "content/01_journal/05_test.html#gain-plot-",
    "href": "content/01_journal/05_test.html#gain-plot-",
    "title": "Performance Measures",
    "section": "7.6 -Gain Plot-",
    "text": "7.6 -Gain Plot-\nranked_predictions_tbl &lt;- predictions_tbl %&gt;%\n  bind_cols(test_tbl) %&gt;%\n  select(predict:Yes, went_on_backorder) %&gt;%\n  # Sorting from highest to lowest class probability\n  arrange(desc(Yes))\n\nranked_predictions_tbl %&gt;%\n  mutate(ntile = ntile(Yes, n = 10)) %&gt;%\n  group_by(ntile) %&gt;%\n  summarise(\n    cases = n(),\n    responses = sum(went_on_backorder == \"Yes\")\n  ) %&gt;%\n  arrange(desc(ntile))\n\ncalculated_gain_lift_tbl &lt;- ranked_predictions_tbl %&gt;%\n  mutate(ntile = ntile(Yes, n = 10)) %&gt;%\n  group_by(ntile) %&gt;%\n  summarise(\n    cases = n(),\n    responses = sum(went_on_backorder == \"Yes\")\n  ) %&gt;%\n  arrange(desc(ntile)) %&gt;%\n  \n  # Add group numbers (opposite of ntile)\n  mutate(group = row_number()) %&gt;%\n  select(group, cases, responses) %&gt;%\n  \n  # Calculations\n  mutate(\n    cumulative_responses = cumsum(responses),\n    pct_responses        = responses / sum(responses),\n    gain                 = cumsum(pct_responses),\n    cumulative_pct_cases = cumsum(cases) / sum(cases),\n    lift                 = gain / cumulative_pct_cases,\n    gain_baseline        = cumulative_pct_cases,\n    lift_baseline        = gain_baseline / cumulative_pct_cases\n  )\n\ncalculated_gain_lift_tbl \n\ngain_lift_tbl &lt;- performance_h2o %&gt;%\n  h2o.gainsLift() %&gt;%\n  as.tibble()\n\ngain_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"lift\")) %&gt;%\n  mutate(baseline = cumulative_data_fraction) %&gt;%\n  rename(gain     = cumulative_capture_rate) %&gt;%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  ) +\n  theme_new\nThe gain plot is depicted below."
  },
  {
    "objectID": "content/01_journal/05_test.html#lift-plot-",
    "href": "content/01_journal/05_test.html#lift-plot-",
    "title": "Performance Measures",
    "section": "7.7 -Lift Plot-",
    "text": "7.7 -Lift Plot-\nlift_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"capture\")) %&gt;%\n  mutate(baseline = 1) %&gt;%\n  rename(lift = cumulative_lift) %&gt;%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  ) +\n  theme_new\nThe lift plot is depicted below."
  },
  {
    "objectID": "content/01_journal/05_test.html#dashboard-with-cowplot-",
    "href": "content/01_journal/05_test.html#dashboard-with-cowplot-",
    "title": "Performance Measures",
    "section": "7.8 -Dashboard with cowplot-",
    "text": "7.8 -Dashboard with cowplot-\nlibrary(cowplot)\nlibrary(glue)\n\n\n# set values to test the function while building it\nh2o_leaderboard &lt;- automl_models_h2o@leaderboard\nnewdata &lt;- test_tbl\norder_by &lt;- \"auc\"\nmax_models &lt;- 4\nsize &lt;- 1\n\nplot_h2o_performance &lt;- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n  \n  # Inputs\n  \n  leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    slice(1:max_models)\n  \n  newdata_tbl &lt;- newdata %&gt;%\n    as_tibble()\n  \n  # Selecting the first, if nothing is provided\n  order_by      &lt;- tolower(order_by[[1]]) \n  \n  # Convert string stored in a variable to column name (symbol)\n  order_by_expr &lt;- rlang::sym(order_by)\n  \n  # Turn of the progress bars ( opposite h2o.show_progress())\n  h2o.no_progress()\n  \n  # 1. Model metrics\n  \n  get_model_performance_metrics &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n    \n    perf_h2o %&gt;%\n      h2o.metric() %&gt;%\n      as.tibble() %&gt;%\n      select(threshold, tpr, fpr, precision, recall)\n    \n  }\n  \n  model_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        # programmatically reorder factors depending on order_by\n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc      = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss  = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    )\n  \n  \n  # 1A. ROC Plot\n  \n  p1 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n    theme(legend.direction = \"vertical\") \n  \n  \n  # 1B. Precision vs Recall\n  \n  p2 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n    theme(legend.position = \"none\") \n  \n  \n  # 2. Gain / Lift\n  \n  get_gain_lift &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %&gt;%\n      h2o.gainsLift() %&gt;%\n      as.tibble() %&gt;%\n      select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n    \n  }\n  \n  gain_lift_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc  = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    ) %&gt;%\n    rename(\n      gain = cumulative_capture_rate,\n      lift = cumulative_lift\n    ) \n  \n  # 2A. Gain Plot\n  \n  p3 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, gain, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size,) +\n    geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Gain\",\n         x = \"Cumulative Data Fraction\", y = \"Gain\") +\n    theme(legend.position = \"none\")\n  \n  # 2B. Lift Plot\n  \n  p4 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, lift, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Lift\",\n         x = \"Cumulative Data Fraction\", y = \"Lift\") +\n    theme(legend.position = \"none\") \n  \n  \n  # Combine using cowplot\n  \n  # cowplot::get_legend extracts a legend from a ggplot object\n  p_legend &lt;- get_legend(p1)\n  # Remove legend from p1\n  p1 &lt;- p1 + theme(legend.position = \"none\")\n  \n  # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n  p &lt;- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n  \n  # cowplot::ggdraw() sets up a drawing layer\n  p_title &lt;- ggdraw() + \n    \n    # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n    draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n               color = \"#2C3E50\")\n  \n  p_subtitle &lt;- ggdraw() + \n    draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n               color = \"#2C3E50\")\n  \n  # Combine everything\n  ret &lt;- plot_grid(p_title, p_subtitle, p, p_legend, \n                   \n                   # Adjust the relative spacing, so that the legends always fits\n                   ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n  \n  h2o.show_progress()\n  \n  return(ret)\n  \n}\n\nautoml_models_h2o@leaderboard %&gt;%\n  plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                       size = 0.5, max_models = 4)\n\nThe dashboard is depicted below. \n\n\n\n\n\n\nNote\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/06_test.html",
    "href": "content/01_journal/06_test.html",
    "title": "Explaining Black-Box Models with LIME",
    "section": "",
    "text": "Load libraries.\nlibrary(h2o)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\nlibrary(rsample)\nlibrary(ggplot2)\nlibrary(dplyr)\nLoad data and processing pipeline.\n# Load Data\nemployee_attrition_tbl &lt;- read_csv(\"AutoML 1/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndefinitions_raw_tbl    &lt;- read_excel(\"Fundamentals of Machine Learning/Business Decisions with Machine Learning/data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\n# Processing Pipeline\nprocess_hr_data_readable &lt;- function(data, definitions_tbl) {\n  \n  definitions_list &lt;- definitions_tbl %&gt;%\n    fill(...1, .direction = \"down\") %&gt;%\n    filter(!is.na(...2)) %&gt;%\n    separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %&gt;%\n    rename(column_name = ...1) %&gt;%\n    mutate(key = as.numeric(key)) %&gt;%\n    mutate(value = value %&gt;% str_replace(pattern = \"'\", replacement = \"\")) %&gt;%\n    split(.$column_name) %&gt;%\n    map(~ select(., -column_name)) %&gt;%\n    map(~ mutate(., value = as_factor(value))) \n  \n  for (i in seq_along(definitions_list)) {\n    list_name &lt;- names(definitions_list)[i]\n    colnames(definitions_list[[i]]) &lt;- c(list_name, paste0(list_name, \"_value\"))\n  }\n  \n  data_merged_tbl &lt;- list(HR_Data = data) %&gt;%\n    append(definitions_list, after = 1) %&gt;%\n    reduce(left_join) %&gt;%\n    select(-one_of(names(definitions_list))) %&gt;%\n    set_names(str_replace_all(names(.), pattern = \"_value\", \n                              replacement = \"\")) %&gt;%\n    select(sort(names(.))) %&gt;%\n    mutate_if(is.character, as.factor) %&gt;%\n    mutate(\n      BusinessTravel = BusinessTravel %&gt;% fct_relevel(\"Non-Travel\", \n                                                      \"Travel_Rarely\", \n                                                      \"Travel_Frequently\"),\n      MaritalStatus  = MaritalStatus %&gt;% fct_relevel(\"Single\", \n                                                     \"Married\", \n                                                     \"Divorced\")\n    )\n  \n  return(data_merged_tbl)\n  \n}\nApply pipeline.\nemployee_attrition_readable_tbl &lt;- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\nSplit into test and train and apply recipe.\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;% \n  prep()\n\nrecipe_obj\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)"
  },
  {
    "objectID": "content/01_journal/06_test.html#compute-model-",
    "href": "content/01_journal/06_test.html#compute-model-",
    "title": "Explaining Black-Box Models with LIME",
    "section": "2.1 -Compute Model-",
    "text": "2.1 -Compute Model-\nh2o.init()\n\n# Setting the seed is just for reproducability\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n# Set the target and predictors\ny &lt;- \"Attrition\"\nx &lt;- setdiff(names(train_h2o), y)\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\nautoml_models_h2o@leaderboard\n# Save model\nh2o.getModel(\"DeepLearning_grid_3_AutoML_1_20230624_181020_model_1\") %&gt;% \n  h2o.saveModel(path = \"Explaining Black Box Models with LIME/\")\n\n\n\nh2o.init()\n\nautoml_leader &lt;- h2o.loadModel(\"Explaining Black Box Models with LIME/DeepLearning_grid_3_AutoML_1_20230624_181020_model_1\")\nautoml_leader"
  },
  {
    "objectID": "content/01_journal/06_test.html#making-predictions-",
    "href": "content/01_journal/06_test.html#making-predictions-",
    "title": "Explaining Black-Box Models with LIME",
    "section": "3.1 -Making Predictions-",
    "text": "3.1 -Making Predictions-\npredictions_tbl &lt;- automl_leader %&gt;% \n  h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n  as.tibble() %&gt;%\n  bind_cols(\n    test_tbl %&gt;%\n      select(Attrition, EmployeeNumber)\n  )\n\npredictions_tbl\n\ntest_tbl %&gt;%\n  slice(1) %&gt;%\n  glimpse()"
  },
  {
    "objectID": "content/01_journal/06_test.html#single-explanation-",
    "href": "content/01_journal/06_test.html#single-explanation-",
    "title": "Explaining Black-Box Models with LIME",
    "section": "3.2 -Single Explanation-",
    "text": "3.2 -Single Explanation-\nexplainer &lt;- train_tbl %&gt;%\n  select(-Attrition) %&gt;%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\nexplainer\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 20,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 1\n  )\n\nexplanation\n\nexplanation %&gt;%\n  as.tibble() %&gt;%\n  select(feature:prediction) \n\ng &lt;- plot_features(explanation = explanation, ncol = 1)\ng"
  },
  {
    "objectID": "content/01_journal/06_test.html#recreation-of-the-plot-1-",
    "href": "content/01_journal/06_test.html#recreation-of-the-plot-1-",
    "title": "Explaining Black-Box Models with LIME",
    "section": "3.3 - Recreation of the Plot 1-",
    "text": "3.3 - Recreation of the Plot 1-\nPlot given by the task/code.\nexplanation %&gt;% \n  as.tibble()\n\ncase_1 &lt;- explanation %&gt;%\n  filter(case == 1)\n\ncase_1 %&gt;%\n  ggplot(aes(x = feature_weight, y = feature, fill = feature_weight &gt; 0)) +\n  geom_col() +\n  scale_fill_manual(values = c(\"gray\", \"steelblue\"),\n                    labels = c(\"Contradicts\", \"Supports\"),\n                    name = \"Value\") +\n  labs(title = \"Case: 1\",\n       subtitle = c(\"Label: Yes\",\n                    \"Probability: 0.64\",\n                    \"Explanation Fit: 0.33\"),\n       x = \"Feature\",\n       y = \"Weight\") +\n  theme_light() +\n  theme(plot.title = element_text(hjust = 0, margin = margin(0, 10, 0, 0)),\n        plot.subtitle = element_text(hjust = 0, margin = margin(0, 10, 0, 0)))\nThe resulting plot is depicted below. As accordingly as possible.  # -Recreation of Plot 2-\nexplanation_tbl &lt;- as.tibble(explanation)\n\n# Re-create the second plot\nexplanation_2 &lt;- test_tbl %&gt;%\n  slice(1) %&gt;%\n  select(-Attrition) %&gt;% \n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 20,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 1\n  )\n\n\nexplanation_2 &lt;- explanation_2 %&gt;%\n  as.tibble() %&gt;%\n  mutate(row_id = row_number())\n\nexplanation_2t &lt;- explanation_2 %&gt;%\n  mutate(label = ifelse(row_id == 20, \"Yes\", label))\n\n\nexplanation_2t %&gt;%\n  ggplot(aes(row_id,feature_desc, fill = feature_weight)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"steelblue\") +\n  facet_wrap(vars(label)) +\n  labs(title = \"Feature Importance\",\n       x = \"Case\",\n       y = \"Feature\") +\n  theme_bw()\nThe resulting plot is depicted below."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html",
    "href": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "Fundamentals of Machine Learning/Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]